백엔드 파일은 jdk11, SpringBoot 2.7.15 를 사용했습니다. 
webserver : AWS EC2(SSAFY에서 제공함)
WAS 제품 : Tomcat
IDE: InteliJ IDEA 2023.2
ZeroSSL을 이용한 인증서로 https화함.
CI/CD: Jenkins pipeline으로 배포함.
파일 저장 서버 :AWS S3
몽고DB id : S09P12B110
몽고DB pw : 2kyi0C7eSt
마리아DB : id:S09P12B110/ pw:Fbcxyyw15E
배포 백엔드: develop/be 브랜치 기준, 프론트:feature/fe/hg 기준
백엔드 배포시 젠킨스 파이프라인:
pipeline {
    agent any
    
    environment {
        CONTAINER_NAME = "jenkins-backend-container"
        IMAGE_NAME = "jenkins-backend-image"
    }
    stages {
        stage('Git Clone') {
            steps {
                git branch: 'test/be/chatremove', credentialsId: 'asdasd', url: 'https://lab.ssafy.com/s09-webmobile1-sub2/S09P12B110.git'
                sh "docker images"
            }
        }
        
        stage('Build') {
            steps {
                // 프로젝트 디렉토리로 이동
                // dir('./server/rhythm4cuts') {
                //     sh 'gradle clean build'
                // }
                // gralew이 있어야됨. git clone해서 project를 가져옴.
                sh '''
                    cd ./backend/singstreet
                    chmod +x ./gradlew
                    ./gradlew clean build -x test
                '''
            }
        }
        
        stage('Docker delete') {
            steps {
                script {
                    try {
                        // 컨테이너가 존재하면 삭제합니다.
                        sh "docker stop ${CONTAINER_NAME}"
                        sh "docker rm -f ${CONTAINER_NAME}"
                    } catch (Exception e) {
                        // 컨테이너가 존재하지 않는 경우 에러가 발생할 수 있으므로, 에러를 무시합니다.
                        echo "Docker container ${CONTAINER_NAME} does not exist. Skipping deletion."
                    }
                    
                    try {
                        // 이미지가 존재하면 삭제합니다.
                        sh "docker image rm ${IMAGE_NAME}"
                    } catch (Exception e) {
                        // 이미지가 존재하지 않는 경우 에러가 발생할 수 있으므로, 에러를 무시합니다.
                        echo "Docker image ${IMAGE_NAME} does not exist. Skipping deletion."
                    }
                }
            }
            
            post {
                success { 
                    sh 'echo "docker delete Success"'
                }
                failure {
                    sh 'echo "docker delete Fail"'
                }
            }
        }
        stage('Dockerizing'){
            steps{
                sh 'echo " Image Bulid Start"'
                sh """
                    cd ./backend/singstreet
                    ls -la
                    docker build -t ${IMAGE_NAME} . 
                """
            }
            post {
                success {
                    sh 'echo "Bulid Docker Image Success"'
                }
                failure {
                    sh 'echo "Bulid Docker Image Fail"'
                }
            }
        }
        stage('Deploy') {
            steps {
                sh "docker run --name ${CONTAINER_NAME} -d -p 4050:8080 -p 8080:8081 ${IMAGE_NAME}"
            }
            post {
                success {
                    echo 'deploy success'
                }
                failure {
                    echo 'deploy failed'
                }
            }
        }
    }
}

프론트엔드 젠킨스 파이프라인:
 pipeline {
    agent any
    
    environment {
        CONTAINER_NAME = "jenkins-frontend-container"
        IMAGE_NAME = "jenkins-frontend-image"
    }
    tools {
        nodejs 'npm'
    }
    stages {
        stage('Git Clone') {
            steps {
                git branch: 'feature/fe/hg', credentialsId: 'asdasd', url: 'https://lab.ssafy.com/s09-webmobile1-sub2/S09P12B110.git'
                sh "docker images"
            }
        }
        stage('Build') {
            steps {
                sh '''
                    cd frontend
                    npm install .
                    CI=false npm run build
                '''
            }
        }
        
        stage('Docker delete') {
            steps {
                script {
                    try {
                        // 컨테이너가 존재하면 삭제합니다.
                        sh "docker stop ${CONTAINER_NAME}"
                        sh "docker rm -f ${CONTAINER_NAME}"
                    } catch (Exception e) {
                        // 컨테이너가 존재하지 않는 경우 에러가 발생할 수 있으므로, 에러를 무시합니다.
                        echo "Docker container ${CONTAINER_NAME} does not exist. Skipping deletion."
                    }
                    
                    try {
                        // 이미지가 존재하면 삭제합니다.
                        sh "docker image rm ${IMAGE_NAME}"
                    } catch (Exception e) {
                        // 이미지가 존재하지 않는 경우 에러가 발생할 수 있으므로, 에러를 무시합니다.
                        echo "Docker image ${IMAGE_NAME} does not exist. Skipping deletion."
                    }
                }
            }
            
            post {
                success { 
                    sh 'echo "docker delete Success"'
                }
                failure {
                    sh 'echo "docker delete Fail"'
                }
            }
        }
        stage('Dockerizing'){
            steps{
                sh 'echo " Image Bulid Start"'
                sh """
                    cd frontend
                    ls -la
                    docker build -t ${IMAGE_NAME} . 
                """
            }
            post {
                success {
                    sh 'echo "Bulid Docker Image Success"'
                }
                failure {
                    sh 'echo "Bulid Docker Image Fail"'
                }
            }
        }
        stage('Deploy') {
            steps {
                sh "docker run --name ${CONTAINER_NAME} -d -p 3000:3000 ${IMAGE_NAME}"
            }
            post {
                success {
                    echo 'deploy success'
                }
                failure {
                    echo 'deploy failed'
                }
            }
        }
    }
}
채팅 파이프라인:
 pipeline {
    agent any
    
    environment {
        CONTAINER_NAME = "jenkins-chatting-container"
        IMAGE_NAME = "jenkins-chatting-image"
    }
    stages {
        stage('Git Clone') {
            steps {
                git branch: 'chatTest', credentialsId: 'asdasd', url: 'https://lab.ssafy.com/s09-webmobile1-sub2/S09P12B110.git'
                sh "docker images"
            }
        }
        
        stage('Build') {
            steps {
                // 프로젝트 디렉토리로 이동
                // dir('./server/rhythm4cuts') {
                //     sh 'gradle clean build'
                // }
                // gralew이 있어야됨. git clone해서 project를 가져옴.
                sh '''
                    cd ./demo
                    chmod +x ./gradlew
                    ./gradlew clean build -x test
                '''
            }
        }
        
        stage('Docker delete') {
            steps {
                script {
                    try {
                        // 컨테이너가 존재하면 삭제합니다.
                        sh "docker stop ${CONTAINER_NAME}"
                        sh "docker rm -f ${CONTAINER_NAME}"
                    } catch (Exception e) {
                        // 컨테이너가 존재하지 않는 경우 에러가 발생할 수 있으므로, 에러를 무시합니다.
                        echo "Docker container ${CONTAINER_NAME} does not exist. Skipping deletion."
                    }
                    
                    try {
                        // 이미지가 존재하면 삭제합니다.
                        sh "docker image rm ${IMAGE_NAME}"
                    } catch (Exception e) {
                        // 이미지가 존재하지 않는 경우 에러가 발생할 수 있으므로, 에러를 무시합니다.
                        echo "Docker image ${IMAGE_NAME} does not exist. Skipping deletion."
                    }
                }
            }
            
            post {
                success { 
                    sh 'echo "docker delete Success"'
                }
                failure {
                    sh 'echo "docker delete Fail"'
                }
            }
        }
        stage('Dockerizing'){
            steps{
                sh 'echo " Image Bulid Start"'
                sh """
                    cd ./demo
                    ls -la
                    docker build -t ${IMAGE_NAME} . 
                """
            }
            post {
                success {
                    sh 'echo "Bulid Docker Image Success"'
                }
                failure {
                    sh 'echo "Bulid Docker Image Fail"'
                }
            }
        }
        stage('Deploy') {
            steps {
                sh "docker run --name ${CONTAINER_NAME} -d -p 6060:8080 ${IMAGE_NAME}"
            }
            post {
                success {
                    echo 'deploy success'
                }
                failure {
                    echo 'deploy failed'
                }
            }
        }
    }
}
CI/CD : Jenkins
